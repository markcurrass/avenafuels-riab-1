{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 .SFNSMono-Light_YAXS144F062_wght2260000;}
{\colortbl;\red255\green255\blue255;\red16\green39\blue45;\red138\green140\blue119;}
{\*\expandedcolortbl;;\cssrgb\c7451\c20392\c23137;\cssrgb\c61176\c61569\c54118\c16078;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 <!DOCTYPE html>\
<html lang="en">\
<head>\
<meta charset="UTF-8" />\
<meta name="viewport" content="width=device-width, initial-scale=1" />\
<title>BioSAF Production SCADA System</title>\
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>\
<style>\
  :root \{\
    --bg: #071029;\
    --card: #0f1724;\
    --muted: #9aa6b2;\
    --accent: #06b6d4;\
    --green: #10b981;\
    --yellow: #f59e0b;\
    --red: #ef4444;\
  \}\
  * \{\
    box-sizing: border-box;\
  \}\
  body \{\
    font-family: Inter, ui-sans-serif, Arial, sans-serif;\
    background: linear-gradient(180deg, #031024, #071029);\
    color: #e6eef6;\
    margin: 0;\
    padding: 24px;\
    line-height: 1.5;\
    min-height: 100vh;\
  \}\
  .container \{\
    max-width: 1600px;\
    margin: 0 auto;\
  \}\
  .card \{\
    background: var(--card);\
    border-radius: 12px;\
    padding: 20px;\
    margin-bottom: 20px;\
    border: 1px solid rgba(255,255,255,0.05);\
    box-shadow: 0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -1px rgba(0,0,0,0.06);\
  \}\
  .title \{\
    font-size: 1.5rem;\
    font-weight: 600;\
    margin-bottom: 8px;\
    color: var(--accent);\
  \}\
  .subtitle \{\
    color: var(--muted);\
    font-size: 0.875rem;\
    margin-bottom: 16px;\
  \}\
  .row \{\
    display: flex;\
    gap: 16px;\
    flex-wrap: wrap;\
  \}\
  .clickable \{\
    cursor: pointer;\
    transition: transform 0.2s, box-shadow 0.2s;\
  \}\
  .clickable:hover \{\
    transform: translateY(-2px);\
    box-shadow: 0 8px 12px -4px rgba(6, 182, 212, 0.3);\
  \}\
  .status-pill \{\
    display: inline-block;\
    padding: 4px 12px;\
    border-radius: 9999px;\
    font-size: 0.75rem;\
    font-weight: 500;\
    text-transform: uppercase;\
    letter-spacing: 0.05em;\
    user-select: none;\
  \}\
  .status-connected \{ background: rgba(16, 185, 129, 0.2); color: var(--green); \}\
  .status-warning \{ background: rgba(245, 158, 11, 0.2); color: var(--yellow); \}\
  .status-error \{ background: rgba(239, 68, 68, 0.2); color: var(--red); \}\
  .stat \{\
    font-size: 2rem;\
    font-weight: 600;\
    color: var(--accent);\
    margin-top: 8px;\
  \}\
  .stat-label \{\
    font-size: 0.875rem;\
    color: var(--muted);\
    text-transform: uppercase;\
    letter-spacing: 0.05em;\
  \}\
  button \{\
    background: rgba(6, 182, 212, 0.1);\
    border: 1px solid rgba(6, 182, 212, 0.3);\
    color: var(--accent);\
    padding: 10px 20px;\
    border-radius: 6px;\
    cursor: pointer;\
    font-size: 0.875rem;\
    font-weight: 500;\
    user-select: none;\
    transition: all 0.2s;\
    margin-right: 8px;\
  \}\
  button:hover \{\
    background: rgba(6, 182, 212, 0.2);\
    border-color: var(--accent);\
  \}\
  button:active \{\
    transform: scale(0.98);\
  \}\
  .chart-container \{\
    position: relative;\
    height: 280px;\
    margin-top: 16px;\
  \}\
  .chart-container-small \{\
    position: relative;\
    height: 200px;\
    margin-top: 16px;\
  \}\
  .grid-2 \{\
    display: grid;\
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\
    gap: 16px;\
  \}\
  .grid-4 \{\
    display: grid;\
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\
    gap: 16px;\
  \}\
  .metric-card \{\
    background: rgba(6, 182, 212, 0.05);\
    padding: 16px;\
    border-radius: 8px;\
    border: 1px solid rgba(6, 182, 212, 0.2);\
  \}\
  .back-btn \{\
    background: rgba(255, 255, 255, 0.05);\
    border: 1px solid rgba(255, 255, 255, 0.1);\
    color: #e6eef6;\
    margin-bottom: 16px;\
  \}\
  .back-btn:hover \{\
    background: rgba(255, 255, 255, 0.1);\
  \}\
  table \{\
    width: 100%;\
    border-collapse: collapse;\
    margin-top: 16px;\
  \}\
  th, td \{\
    padding: 12px;\
    text-align: left;\
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);\
  \}\
  th \{\
    color: var(--accent);\
    font-weight: 600;\
    font-size: 0.875rem;\
    text-transform: uppercase;\
    letter-spacing: 0.05em;\
  \}\
  td \{\
    color: #e6eef6;\
  \}\
  .header-bar \{\
    display: flex;\
    justify-content: space-between;\
    align-items: center;\
    flex-wrap: wrap;\
    gap: 16px;\
    margin-bottom: 24px;\
  \}\
  .system-status \{\
    display: flex;\
    gap: 24px;\
    align-items: center;\
  \}\
</style>\
</head>\
<body>\
  <div class="container">\
    <div id="app"></div>\
  </div>\
<script>\
  const state = \{\
    activeView: 'main',\
    connectionStatus: 'Connected',\
    dataPoints: 12456,\
    isPaused: false,\
    lastUpdate: new Date(),\
    tanks: \{\
      T1: \{ capacity: 10000, level: 75, status: 'normal', temp: 22.5, product: 'Crude Syngas' \},\
      T2: \{ capacity: 10000, level: 45, status: 'normal', temp: 21.8, product: 'FT Wax' \},\
      T3: \{ capacity: 10000, level: 90, status: 'high', temp: 23.1, product: 'Light Naphtha' \},\
      T4: \{ capacity: 10000, level: 30, status: 'low', temp: 20.9, product: 'Heavy Naphtha' \},\
      T5: \{ capacity: 10000, level: 60, status: 'normal', temp: 22.0, product: 'Kerosene' \},\
      T6: \{ capacity: 10000, level: 85, status: 'high', temp: 23.5, product: 'Diesel' \},\
      T7: \{ capacity: 10000, level: 15, status: 'low', temp: 21.2, product: 'BioSAF' \},\
      T8: \{ capacity: 10000, level: 50, status: 'normal', temp: 22.3, product: 'Waste Water' \}\
    \},\
    valves: \{\
      V1: \{status: 'open', mode: 'auto', opening: 100, flow: 250\},\
      V2: \{status: 'closed', mode: 'manual', opening: 0, flow: 0\},\
      V3: \{status: 'open', mode: 'auto', opening: 75, flow: 180\},\
      V4: \{status: 'open', mode: 'auto', opening: 100, flow: 300\},\
      V5: \{status: 'partial', mode: 'auto', opening: 45, flow: 120\},\
      V6: \{status: 'open', mode: 'auto', opening: 90, flow: 220\}\
    \},\
    pumps: \{\
      P1: \{status: 'running', speed: 100, power: 15.2, runtime: 2456, efficiency: 94.2\},\
      P2: \{status: 'stopped', speed: 0, power: 0, runtime: 1234, efficiency: 0\},\
      P3: \{status: 'running', speed: 85, power: 12.8, runtime: 3421, efficiency: 91.5\},\
      P4: \{status: 'running', speed: 95, power: 14.1, runtime: 2890, efficiency: 93.8\},\
      P5: \{status: 'standby', speed: 0, power: 0.5, runtime: 1567, efficiency: 0\},\
      P6: \{status: 'running', speed: 100, power: 16.3, runtime: 4123, efficiency: 95.1\}\
    \},\
    mlPredictions: \{ efficiency: 92.3, qualityScore: 8.7, predictedYield: 85.2, co2Reduction: 45.6 \},\
    processStages: \{\
      biomassPrep: \{ efficiency: 95.2, yield: 98.1, temp: 80.5, status: 'active' \},\
      ftSynthesis: \{ efficiency: 92.1, yield: 85.4, coConversion: 70.2, status: 'active' \},\
      hydrogenation: \{ efficiency: 96.3, yield: 90.7, pressure: 25.1, status: 'active' \},\
      isomerization: \{ efficiency: 94.5, yield: 92.2, temp: 250.3, status: 'active' \},\
      distillation: \{ efficiency: 99.1, yield: 88.6, purity: 99.5, status: 'active' \}\
    \},\
    ftReactor: \{\
      temperature: 220.5,\
      pressure: 25.3,\
      h2coRatio: 2.1,\
      conversionRate: 70.2,\
      selectivity: 85.6,\
      spaceVelocity: 1200,\
      bedTemp: [218, 222, 225, 223, 220, 219, 221, 224],\
      productDistribution: \{\
        c1c4: 12.5,\
        c5c11: 35.2,\
        c12c18: 42.8,\
        c19plus: 9.5\
      \},\
      operatingHours: 2456,\
      lastMaintenance: 456\
    \},\
    catalyst: \{\
      type: 'Co/Al2O3',\
      loading: 20.5,\
      activity: 94.2,\
      selectivity: 88.7,\
      age: 2456,\
      expectedLife: 8760,\
      deactivationRate: 0.012,\
      poisoning: \{\
        sulfur: 0.2,\
        nitrogen: 0.1,\
        chlorine: 0.05\
      \},\
      regenerationHistory: [\
        \{ date: '2024-01-15', activity: 98.5, method: 'H2 reduction' \},\
        \{ date: '2024-04-20', activity: 96.8, method: 'H2 reduction' \},\
        \{ date: '2024-07-12', activity: 95.1, method: 'H2 reduction' \}\
      ],\
      temperature: 221.3,\
      pressure: 25.1,\
      coConversion: 70.2,\
      c5plusSelectivity: 87.9\
    \},\
    trendData: \{\
      labels: [],\
      efficiency: [],\
      yield: [],\
      temperature: []\
    \}\
  \};\
\
  let charts = \{\};\
\
  function getStatusColor(status) \{\
    const colors = \{\
      'normal': '#10b981',\
      'high': '#f59e0b',\
      'low': '#ef4444',\
      'active': '#10b981',\
      'running': '#10b981',\
      'stopped': '#ef4444',\
      'standby': '#f59e0b',\
      'open': '#10b981',\
      'closed': '#ef4444',\
      'partial': '#f59e0b'\
    \};\
    return colors[status] || '#9aa6b2';\
  \}\
\
  function initializeTrendData() \{\
    const now = Date.now();\
    for (let i = 20; i >= 0; i--) \{\
      const time = new Date(now - i * 60000);\
      state.trendData.labels.push(time.toLocaleTimeString('en-US', \{hour: '2-digit', minute: '2-digit'\}));\
      state.trendData.efficiency.push(92 + Math.random() * 6);\
      state.trendData.yield.push(85 + Math.random() * 8);\
      state.trendData.temperature.push(75 + Math.random() * 15);\
    \}\
  \}\
\
  function renderMainView(root) \{\
    root.innerHTML = \
`<div class="header-bar">\
  <div>\
    <div class="title">BioSAF Production SCADA System</div>\
    <div class="subtitle">AI/ML Monitoring Dashboard - Real-time Process Control</div>\
  </div>\
  <div class="system-status">\
    <span class="status-pill status-connected">$\{state.connectionStatus\}</span>\
    <span style="color: var(--muted);">Data Points: $\{state.dataPoints.toLocaleString()\}</span>\
    <span style="color: var(--muted);">Updated: $\{state.lastUpdate.toLocaleTimeString()\}</span>\
  </div>\
</div>\
\
<div class="row" style="margin-bottom: 20px;">\
  <button onclick="togglePause()">$\{state.isPaused ? '\uc0\u9654  Resume' : '\u9208  Pause'\} Updates</button>\
  <button onclick="refreshData()">\uc0\u55357 \u56580  Refresh Data</button>\
  <button onclick="exportData()">\uc0\u55357 \u56522  Export Report</button>\
</div>\
\
<div class="grid-4" style="margin-bottom: 20px;">\
  <div class="metric-card">\
    <div class="stat-label">Overall Efficiency</div>\
    <div class="stat">$\{state.mlPredictions.efficiency.toFixed(1)\}%</div>\
  </div>\
  <div class="metric-card">\
    <div class="stat-label">Quality Score</div>\
    <div class="stat">$\{state.mlPredictions.qualityScore.toFixed(1)\}/10</div>\
  </div>\
  <div class="metric-card">\
    <div class="stat-label">Predicted Yield</div>\
    <div class="stat">$\{state.mlPredictions.predictedYield.toFixed(1)\}%</div>\
  </div>\
  <div class="metric-card">\
    <div class="stat-label">CO\uc0\u8322  Reduction</div>\
    <div class="stat">$\{state.mlPredictions.co2Reduction.toFixed(1)\}%</div>\
  </div>\
</div>\
\
<div class="row">\
  <div class="card clickable" style="flex: 1; min-width: 280px;" onclick="switchView('tanks')">\
    <div class="title">\uc0\u55357 \u57058  Tank Levels</div>\
    <div class="subtitle">8 storage tanks monitored</div>\
    <div class="chart-container-small">\
      <canvas id="tankChart"></canvas>\
    </div>\
  </div>\
  <div class="card clickable" style="flex: 1; min-width: 280px;" onclick="switchView('valves')">\
    <div class="title">\uc0\u55357 \u56615  Valve Control</div>\
    <div class="subtitle">6 automated valves</div>\
    <div class="chart-container-small">\
      <canvas id="valveChart"></canvas>\
    </div>\
  </div>\
  <div class="card clickable" style="flex: 1; min-width: 280px;" onclick="switchView('pumps')">\
    <div class="title">\uc0\u9881 \u65039  Pump Operations</div>\
    <div class="subtitle">6 pumps operational</div>\
    <div class="chart-container-small">\
      <canvas id="pumpChart"></canvas>\
    </div>\
  </div>\
</div>\
\
<div class="grid-2">\
  <div class="card">\
    <div class="title">Process Stage Efficiency</div>\
    <div class="subtitle">Real-time stage performance metrics</div>\
    <div class="chart-container">\
      <canvas id="stagesChart"></canvas>\
    </div>\
  </div>\
  <div class="card">\
    <div class="title">Production Trends</div>\
    <div class="subtitle">Last 20 minutes of operation</div>\
    <div class="chart-container">\
      <canvas id="trendChart"></canvas>\
    </div>\
  </div>\
</div>\
\
<div class="card clickable" onclick="switchView('ftreactor')" style="border: 2px solid rgba(6, 182, 212, 0.3);">\
  <div class="title">\uc0\u55357 \u56620  Fischer-Tropsch Reactor & Catalyst Analysis</div>\
  <div class="subtitle">Click for detailed reactor and catalyst performance monitoring</div>\
  <div class="row" style="margin-top: 16px;">\
    <div style="flex: 1;">\
      <div class="stat-label">Reactor Temperature</div>\
      <div style="font-size: 1.5rem; font-weight: 600; color: var(--accent); margin-top: 4px;">$\{state.ftReactor.temperature.toFixed(1)\}\'b0C</div>\
    </div>\
    <div style="flex: 1;">\
      <div class="stat-label">Catalyst Activity</div>\
      <div style="font-size: 1.5rem; font-weight: 600; color: var(--green); margin-top: 4px;">$\{state.catalyst.activity.toFixed(1)\}%</div>\
    </div>\
    <div style="flex: 1;">\
      <div class="stat-label">CO Conversion</div>\
      <div style="font-size: 1.5rem; font-weight: 600; color: var(--accent); margin-top: 4px;">$\{state.ftReactor.conversionRate.toFixed(1)\}%</div>\
    </div>\
    <div style="flex: 1;">\
      <div class="stat-label">Selectivity</div>\
      <div style="font-size: 1.5rem; font-weight: 600; color: var(--green); margin-top: 4px;">$\{state.catalyst.c5plusSelectivity.toFixed(1)\}%</div>\
    </div>\
  </div>\
</div>`;\
    \
    setTimeout(() => \{\
      initAllMainCharts();\
    \}, 10);\
  \}\
\
  function initAllMainCharts() \{\
    initStagesChart();\
    initTankChart();\
    initValveChart();\
    initPumpChart();\
    initTrendChart();\
  \}\
\
  function initStagesChart() \{\
    const ctx = document.getElementById('stagesChart');\
    if (!ctx) return;\
    if (charts.stages) charts.stages.destroy();\
    \
    charts.stages = new Chart(ctx, \{\
      type: 'bar',\
      data: \{\
        labels: ['Biomass Prep', 'FT Synthesis', 'Hydrogenation', 'Isomerization', 'Distillation'],\
        datasets: [\{\
          label: 'Efficiency (%)',\
          data: [\
            state.processStages.biomassPrep.efficiency,\
            state.processStages.ftSynthesis.efficiency,\
            state.processStages.hydrogenation.efficiency,\
            state.processStages.isomerization.efficiency,\
            state.processStages.distillation.efficiency,\
          ],\
          backgroundColor: 'rgba(16, 185, 129, 0.6)',\
          borderColor: '#10b981',\
          borderWidth: 2\
        \},\
        \{\
          label: 'Yield (%)',\
          data: [\
            state.processStages.biomassPrep.yield,\
            state.processStages.ftSynthesis.yield,\
            state.processStages.hydrogenation.yield,\
            state.processStages.isomerization.yield,\
            state.processStages.distillation.yield,\
          ],\
          backgroundColor: 'rgba(6, 182, 212, 0.6)',\
          borderColor: '#06b6d4',\
          borderWidth: 2\
        \}]\
      \},\
      options: \{\
        responsive: true,\
        maintainAspectRatio: false,\
        plugins: \{\
          legend: \{\
            labels: \{ color: '#e6eef6' \}\
          \}\
        \},\
        scales: \{\
          y: \{ \
            beginAtZero: true, \
            max: 100,\
            ticks: \{ color: '#9aa6b2' \},\
            grid: \{ color: 'rgba(255,255,255,0.05)' \}\
          \},\
          x: \{\
            ticks: \{ color: '#9aa6b2' \},\
            grid: \{ color: 'rgba(255,255,255,0.05)' \}\
          \}\
        \}\
      \}\
    \});\
  \}\
\
  function initTankChart() \{\
    const ctx = document.getElementById('tankChart');\
    if (!ctx) return;\
    if (charts.tank) charts.tank.destroy();\
    \
    const tankLevels = Object.values(state.tanks).map(t => t.level);\
    const tankLabels = Object.keys(state.tanks);\
    \
    charts.tank = new Chart(ctx, \{\
      type: 'bar',\
      data: \{\
        labels: tankLabels,\
        datasets: [\{\
          label: 'Level (%)',\
          data: tankLevels,\
          backgroundColor: tankLevels.map((level, i) => \{\
            const status = Object.values(state.tanks)[i].status;\
            return getStatusColor(status) + '99';\
          \}),\
          borderWidth: 0\
        \}]\
      \},\
      options: \{\
        responsive: true,\
        maintainAspectRatio: false,\
        plugins: \{\
          legend: \{ display: false \}\
        \},\
        scales: \{\
          y: \{ \
            beginAtZero: true, \
            max: 100,\
            ticks: \{ color: '#9aa6b2', font: \{ size: 10 \} \},\
            grid: \{ color: 'rgba(255,255,255,0.05)' \}\
          \},\
          x: \{\
            ticks: \{ color: '#9aa6b2', font: \{ size: 10 \} \},\
            grid: \{ display: false \}\
          \}\
        \}\
      \}\
    \});\
  \}\
\
  function initValveChart() \{\
    const ctx = document.getElementById('valveChart');\
    if (!ctx) return;\
    if (charts.valve) charts.valve.destroy();\
    \
    const valveData = Object.values(state.valves).map(v => v.opening);\
    const valveLabels = Object.keys(state.valves);\
    \
    charts.valve = new Chart(ctx, \{\
      type: 'doughnut',\
      data: \{\
        labels: valveLabels,\
        datasets: [\{\
          data: valveData,\
          backgroundColor: [\
            '#10b981',\
            '#ef4444',\
            '#06b6d4',\
            '#f59e0b',\
            '#8b5cf6',\
            '#ec4899'\
          ]\
        \}]\
      \},\
      options: \{\
        responsive: true,\
        maintainAspectRatio: false,\
        plugins: \{\
          legend: \{\
            position: 'right',\
            labels: \{ color: '#e6eef6', font: \{ size: 10 \} \}\
          \}\
        \}\
      \}\
    \});\
  \}\
\
  function initPumpChart() \{\
    const ctx = document.getElementById('pumpChart');\
    if (!ctx) return;\
    if (charts.pump) charts.pump.destroy();\
    \
    const pumpSpeeds = Object.values(state.pumps).map(p => p.speed);\
    const pumpLabels = Object.keys(state.pumps);\
    \
    charts.pump = new Chart(ctx, \{\
      type: 'radar',\
      data: \{\
        labels: pumpLabels,\
        datasets: [\{\
          label: 'Speed (%)',\
          data: pumpSpeeds,\
          backgroundColor: 'rgba(6, 182, 212, 0.2)',\
          borderColor: '#06b6d4',\
          borderWidth: 2\
        \}]\
      \},\
      options: \{\
        responsive: true,\
        maintainAspectRatio: false,\
        plugins: \{\
          legend: \{ display: false \}\
        \},\
        scales: \{\
          r: \{\
            beginAtZero: true,\
            max: 100,\
            ticks: \{ color: '#9aa6b2', backdropColor: 'transparent' \},\
            grid: \{ color: 'rgba(255,255,255,0.1)' \},\
            pointLabels: \{ color: '#9aa6b2', font: \{ size: 10 \} \}\
          \}\
        \}\
      \}\
    \});\
  \}\
\
  function initTrendChart() \{\
    const ctx = document.getElementById('trendChart');\
    if (!ctx) return;\
    if (charts.trend) charts.trend.destroy();\
    \
    charts.trend = new Chart(ctx, \{\
      type: 'line',\
      data: \{\
        labels: state.trendData.labels,\
        datasets: [\
          \{\
            label: 'Efficiency (%)',\
            data: state.trendData.efficiency,\
            borderColor: '#10b981',\
            backgroundColor: 'rgba(16, 185, 129, 0.1)',\
            tension: 0.4,\
            fill: true\
          \},\
          \{\
            label: 'Yield (%)',\
            data: state.trendData.yield,\
            borderColor: '#06b6d4',\
            backgroundColor: 'rgba(6, 182, 212, 0.1)',\
            tension: 0.4,\
            fill: true\
          \}\
        ]\
      \},\
      options: \{\
        responsive: true,\
        maintainAspectRatio: false,\
        plugins: \{\
          legend: \{\
            labels: \{ color: '#e6eef6' \}\
          \}\
        \},\
        scales: \{\
          y: \{ \
            beginAtZero: true,\
            max: 100,\
            ticks: \{ color: '#9aa6b2' \},\
            grid: \{ color: 'rgba(255,255,255,0.05)' \}\
          \},\
          x: \{\
            ticks: \{ color: '#9aa6b2', maxRotation: 45 \},\
            grid: \{ color: 'rgba(255,255,255,0.05)' \}\
          \}\
        \}\
      \}\
    \});\
  \}\
\
  function renderTanksView(root) \{\
    let tanksHtml = Object.entries(state.tanks).map(([name, tank]) => \{\
      const volume = ((tank.level / 100) * tank.capacity).toFixed(0);\
      return `<tr>\
        <td style="font-weight: 600;">$\{name\}</td>\
        <td>$\{tank.product\}</td>\
        <td>$\{tank.level.toFixed(1)\}%</td>\
        <td>$\{volume\} L / $\{tank.capacity\} L</td>\
        <td>$\{tank.temp.toFixed(1)\}\'b0C</td>\
        <td><span class="status-pill" style="background: $\{getStatusColor(tank.status)\}22; color: $\{getStatusColor(tank.status)\}">$\{tank.status\}</span></td>\
      </tr>`;\
    \}).join('');\
    \
    root.innerHTML = \
    `<button class="back-btn" onclick="switchView('main')">\uc0\u8592  Back to Dashboard</button>\
    <div class="card">\
      <div class="title">\uc0\u55357 \u57058  Tank Level Monitoring</div>\
      <div class="subtitle">Detailed tank status and inventory management</div>\
      <table>\
        <thead>\
          <tr>\
            <th>Tank</th>\
            <th>Product</th>\
            <th>Level</th>\
            <th>Volume</th>\
            <th>Temperature</th>\
            <th>Status</th>\
          </tr>\
        </thead>\
        <tbody>$\{tanksHtml\}</tbody>\
      </table>\
    </div>\
    <div class="card">\
      <div class="title">Tank Level Distribution</div>\
      <div class="chart-container">\
        <canvas id="tankDetailChart"></canvas>\
      </div>\
    </div>`;\
    \
    setTimeout(() => \{\
      const ctx = document.getElementById('tankDetailChart');\
      if (!ctx) return;\
      if (charts.tankDetail) charts.tankDetail.destroy();\
      \
      charts.tankDetail = new Chart(ctx, \{\
        type: 'bar',\
        data: \{\
          labels: Object.keys(state.tanks),\
          datasets: [\{\
            label: 'Current Level (%)',\
            data: Object.values(state.tanks).map(t => t.level),\
            backgroundColor: Object.values(state.tanks).map(t => getStatusColor(t.status) + '99'),\
            borderColor: Object.values(state.tanks).map(t => getStatusColor(t.status)),\
            borderWidth: 2\
          \}]\
        \},\
        options: \{\
          responsive: true,\
          maintainAspectRatio: false,\
          plugins: \{\
            legend: \{ labels: \{ color: '#e6eef6' \} \}\
          \},\
          scales: \{\
            y: \{ \
              beginAtZero: true,\
              max: 100,\
              ticks: \{ color: '#9aa6b2' \},\
              grid: \{ color: 'rgba(255,255,255,0.05)' \}\
            \},\
            x: \{\
              ticks: \{ color: '#9aa6b2' \},\
              grid: \{ color: 'rgba(255,255,255,0.05)' \}\
            \}\
          \}\
        \}\
      \});\
    \}, 10);\
  \}\
\
  function renderValvesView(root) \{\
    let valvesHtml = Object.entries(state.valves).map(([name, valve]) => \{\
      return `<tr>\
        <td style="font-weight: 600;">$\{name\}</td>\
        <td><span class="status-pill" style="background: $\{getStatusColor(valve.status)\}22; color: $\{getStatusColor(valve.status)\}">$\{valve.status\}</span></td>\
        <td>$\{valve.mode\}</td>\
        <td>$\{valve.opening\}%</td>\
        <td>$\{valve.flow\} L/min</td>\
        <td><button onclick="toggleValve('$\{name\}')">Toggle</button></td>\
      </tr>`;\
    \}).join('');\
    \
    root.innerHTML = \
    `<button class="back-btn" onclick="switchView('main')">\uc0\u8592  Back to Dashboard</button>\
    <div class="card">\
      <div class="title">\uc0\u55357 \u56615  Valve Control Center</div>\
      <div class="subtitle">Automated and manual valve control interface</div>\
      <table>\
        <thead>\
          <tr>\
            <th>Valve</th>\
            <th>Status</th>\
            <th>Mode</th>\
            <th>Opening</th>\
            <th>Flow Rate</th>\
            <th>Control</th>\
          </tr>\
        </thead>\
        <tbody>$\{valvesHtml\}</tbody>\
      </table>\
    </div>\
    <div class="grid-2">\
      <div class="card">\
        <div class="title">Valve Position Distribution</div>\
        <div class="chart-container">\
          <canvas id="valveDetailChart"></canvas>\
        </div>\
      </div>\
      <div class="card">\
        <div class="title">Flow Rates</div>\
        <div class="chart-container">\
          <canvas id="flowChart"></canvas>\
        </div>\
      </div>\
    </div>`;\
    \
    setTimeout(() => \{\
      const ctx1 = document.getElementById('valveDetailChart');\
      if (ctx1) \{\
        if (charts.valveDetail) charts.valveDetail.destroy();\
        charts.valveDetail = new Chart(ctx1, \{\
          type: 'polarArea',\
          data: \{\
            labels: Object.keys(state.valves),\
            datasets: [\{\
              data: Object.values(state.valves).map(v => v.opening),\
              backgroundColor: [\
                'rgba(16, 185, 129, 0.6)',\
                'rgba(239, 68, 68, 0.6)',\
                'rgba(6, 182, 212, 0.6)',\
                'rgba(245, 158, 11, 0.6)',\
                'rgba(139, 92, 246, 0.6)',\
                'rgba(236, 72, 153, 0.6)'\
              ]\
            \}]\
          \},\
          options: \{\
            responsive: true,\
            maintainAspectRatio: false,\
            plugins: \{\
              legend: \{ labels: \{ color: '#e6eef6' \} \}\
            \},\
            scales: \{\
              r: \{\
                ticks: \{ color: '#9aa6b2', backdropColor: 'transparent' \},\
                grid: \{ color: 'rgba(255,255,255,0.1)' \}\
              \}\
            \}\
          \}\
        \});\
      \}\
      \
      const ctx2 = document.getElementById('flowChart');\
      if (ctx2) \{\
        if (charts.flow) charts.flow.destroy();\
        charts.flow = new Chart(ctx2, \{\
          type: 'bar',\
          data: \{\
            labels: Object.keys(state.valves),\
            datasets: [\{\
              label: 'Flow Rate (L/min)',\
              data: Object.values(state.valves).map(v => v.flow),\
              backgroundColor: 'rgba(6, 182, 212, 0.6)',\
              borderColor: '#06b6d4',\
              borderWidth: 2\
            \}]\
          \},\
          options: \{\
            responsive: true,\
            maintainAspectRatio: false,\
            plugins: \{\
              legend: \{ labels: \{ color: '#e6eef6' \} \}\
            \},\
            scales: \{\
              y: \{ \
                beginAtZero: true,\
                ticks: \{ color: '#9aa6b2' \},\
                grid: \{ color: 'rgba(255,255,255,0.05)' \}\
              \},\
              x: \{\
                ticks: \{ color: '#9aa6b2' \},\
                grid: \{ color: 'rgba(255,255,255,0.05)' \}\
              \}\
            \}\
          \}\
        \});\
      \}\
    \}, 10);\
  \}\
\
  function renderFTReactorView(root) \{\
    const catalystHealth = (state.catalyst.activity / 100) * 100;\
    const catalystAge = ((state.catalyst.age / state.catalyst.expectedLife) * 100).toFixed(1);\
    const daysToMaintenance = Math.floor((state.catalyst.expectedLife - state.catalyst.age) / 24);\
    \
    root.innerHTML = \
    `<button class="back-btn" onclick="switchView('main')">\uc0\u8592  Back to Dashboard</button>\
    \
    <div class="card">\
      <div class="title">\uc0\u55357 \u56620  Fischer-Tropsch Reactor Analysis</div>\
      <div class="subtitle">Real-time reactor performance and operational parameters</div>\
      \
      <div class="grid-4" style="margin-top: 20px;">\
        <div class="metric-card">\
          <div class="stat-label">Reactor Temperature</div>\
          <div class="stat" style="font-size: 1.8rem;">$\{state.ftReactor.temperature.toFixed(1)\}\'b0C</div>\
        </div>\
        <div class="metric-card">\
          <div class="stat-label">Operating Pressure</div>\
          <div class="stat" style="font-size: 1.8rem;">$\{state.ftReactor.pressure.toFixed(1)\} bar</div>\
        </div>\
        <div class="metric-card">\
          <div class="stat-label">H\uc0\u8322 /CO Ratio</div>\
          <div class="stat" style="font-size: 1.8rem;">$\{state.ftReactor.h2coRatio.toFixed(2)\}</div>\
        </div>\
        <div class="metric-card">\
          <div class="stat-label">Space Velocity</div>\
          <div class="stat" style="font-size: 1.8rem;">$\{state.ftReactor.spaceVelocity\} h\uc0\u8315 \'b9</div>\
        </div>\
      </div>\
\
      <div class="grid-2" style="margin-top: 20px;">\
        <div>\
          <div class="stat-label">CO Conversion Rate</div>\
          <div style="font-size: 2.5rem; font-weight: 600; color: var(--accent); margin-top: 8px;">$\{state.ftReactor.conversionRate.toFixed(1)\}%</div>\
          <div style="color: var(--muted); margin-top: 4px;">Target: 65-75%</div>\
        </div>\
        <div>\
          <div class="stat-label">Product Selectivity</div>\
          <div style="font-size: 2.5rem; font-weight: 600; color: var(--green); margin-top: 8px;">$\{state.ftReactor.selectivity.toFixed(1)\}%</div>\
          <div style="color: var(--muted); margin-top: 4px;">Target: >80%</div>\
        </div>\
      </div>\
    </div>\
\
    <div class="grid-2">\
      <div class="card">\
        <div class="title">Reactor Bed Temperature Profile</div>\
        <div class="subtitle">Temperature distribution across 8 measurement points</div>\
        <div class="chart-container">\
          <canvas id="bedTempChart"></canvas>\
        </div>\
      </div>\
      \
      <div class="card">\
        <div class="title">Product Distribution</div>\
        <div class="subtitle">Hydrocarbon chain length distribution</div>\
        <div class="chart-container">\
          <canvas id="productDistChart"></canvas>\
        </div>\
      </div>\
    </div>\
\
    <div class="card">\
      <div class="title">\uc0\u9879 \u65039  Catalyst Performance Analysis</div>\
      <div class="subtitle">Cobalt-based Fischer-Tropsch catalyst monitoring</div>\
      \
      <div class="grid-4" style="margin-top: 20px;">\
        <div class="metric-card">\
          <div class="stat-label">Catalyst Type</div>\
          <div style="font-size: 1.2rem; font-weight: 600; color: #e6eef6; margin-top: 8px;">$\{state.catalyst.type\}</div>\
          <div style="color: var(--muted); font-size: 0.875rem; margin-top: 4px;">Loading: $\{state.catalyst.loading\}%</div>\
        </div>\
        <div class="metric-card">\
          <div class="stat-label">Catalyst Activity</div>\
          <div class="stat" style="font-size: 1.8rem; color: $\{catalystHealth > 90 ? 'var(--green)' : catalystHealth > 80 ? 'var(--yellow)' : 'var(--red)'\};">$\{state.catalyst.activity.toFixed(1)\}%</div>\
        </div>\
        <div class="metric-card">\
          <div class="stat-label">C5+ Selectivity</div>\
          <div class="stat" style="font-size: 1.8rem;">$\{state.catalyst.c5plusSelectivity.toFixed(1)\}%</div>\
        </div>\
        <div class="metric-card">\
          <div class="stat-label">Operating Hours</div>\
          <div class="stat" style="font-size: 1.8rem;">$\{(state.catalyst.age / 24).toFixed(0)\} days</div>\
        </div>\
      </div>\
\
      <div class="grid-2" style="margin-top: 20px;">\
        <div>\
          <div class="stat-label">Catalyst Age</div>\
          <div style="background: rgba(6, 182, 212, 0.1); padding: 12px; border-radius: 8px; margin-top: 8px;">\
            <div style="display: flex; justify-content: space-between; margin-bottom: 8px;">\
              <span>$\{catalystAge\}% of lifecycle</span>\
              <span>$\{daysToMaintenance\} days to maintenance</span>\
            </div>\
            <div style="background: rgba(255,255,255,0.1); height: 12px; border-radius: 6px; overflow: hidden;">\
              <div style="background: linear-gradient(90deg, var(--green), var(--yellow), var(--red)); height: 100%; width: $\{catalystAge\}%;"></div>\
            </div>\
          </div>\
        </div>\
        <div>\
          <div class="stat-label">Deactivation Rate</div>\
          <div style="font-size: 1.5rem; font-weight: 600; color: $\{state.catalyst.deactivationRate < 0.015 ? 'var(--green)' : 'var(--yellow)'\}; margin-top: 8px;">\
            $\{state.catalyst.deactivationRate.toFixed(3)\}% /hour\
          </div>\
          <div style="color: var(--muted); margin-top: 4px;">Normal range: 0.010-0.015% /hour</div>\
        </div>\
      </div>\
    </div>\
\
    <div class="grid-2">\
      <div class="card">\
        <div class="title">Catalyst Poisoning Analysis</div>\
        <div class="subtitle">Contaminant levels (ppm)</div>\
        <div class="chart-container">\
          <canvas id="poisoningChart"></canvas>\
        </div>\
      </div>\
      \
      <div class="card">\
        <div class="title">Regeneration History</div>\
        <div class="subtitle">Recent catalyst regeneration cycles</div>\
        <table style="margin-top: 16px;">\
          <thead>\
            <tr>\
              <th>Date</th>\
              <th>Method</th>\
              <th>Activity Recovery</th>\
            </tr>\
          </thead>\
          <tbody>\
            $\{state.catalyst.regenerationHistory.map(reg => `\
              <tr>\
                <td>$\{reg.date\}</td>\
                <td>$\{reg.method\}</td>\
                <td><span style="color: var(--green);">$\{reg.activity.toFixed(1)\}%</span></td>\
              </tr>\
            `).join('')\}\
          </tbody>\
        </table>\
        <div style="margin-top: 16px;">\
          <button onclick="scheduleMaintenance()">\uc0\u55357 \u56517  Schedule Regeneration</button>\
          <button onclick="downloadCatalystReport()">\uc0\u55357 \u56516  Download Report</button>\
        </div>\
      </div>\
    </div>\
\
    <div class="card">\
      <div class="title">Operational Recommendations</div>\
      <div class="subtitle">AI-powered optimization suggestions</div>\
      <div style="margin-top: 16px;">\
        $\{state.catalyst.activity < 85 ? `\
          <div style="background: rgba(239, 68, 68, 0.1); border-left: 4px solid var(--red); padding: 12px; margin-bottom: 12px; border-radius: 4px;">\
            <strong style="color: var(--red);">\uc0\u9888 \u65039  Action Required:</strong> Catalyst activity below 85%. Schedule regeneration within 7 days.\
          </div>\
        ` : state.catalyst.activity < 92 ? `\
          <div style="background: rgba(245, 158, 11, 0.1); border-left: 4px solid var(--yellow); padding: 12px; margin-bottom: 12px; border-radius: 4px;">\
            <strong style="color: var(--yellow);">\uc0\u9889  Warning:</strong> Catalyst activity declining. Monitor closely and plan regeneration.\
          </div>\
        ` : `\
          <div style="background: rgba(16, 185, 129, 0.1); border-left: 4px solid var(--green); padding: 12px; margin-bottom: 12px; border-radius: 4px;">\
            <strong style="color: var(--green);">\uc0\u10003  Optimal:</strong> Catalyst performing within normal parameters.\
          </div>\
        `\}\
        \
        $\{state.ftReactor.h2coRatio < 2.0 || state.ftReactor.h2coRatio > 2.2 ? `\
          <div style="background: rgba(245, 158, 11, 0.1); border-left: 4px solid var(--yellow); padding: 12px; margin-bottom: 12px; border-radius: 4px;">\
            <strong style="color: var(--yellow);">\uc0\u9889  Optimization:</strong> H\u8322 /CO ratio outside optimal range (2.0-2.2). Adjust feed composition.\
          </div>\
        ` : ''\}\
        \
        <div style="background: rgba(6, 182, 212, 0.1); border-left: 4px solid var(--accent); padding: 12px; border-radius: 4px;">\
          <strong style="color: var(--accent);">\uc0\u55357 \u56481  Suggestion:</strong> Current selectivity is $\{state.ftReactor.selectivity > 85 ? 'excellent' : 'good'\}. Consider slight temperature adjustment to optimize C12-C18 fraction for SAF production.\
        </div>\
      </div>\
    </div>`;\
    \
    setTimeout(() => \{\
      const ctx1 = document.getElementById('bedTempChart');\
      if (ctx1) \{\
        if (charts.bedTemp) charts.bedTemp.destroy();\
        charts.bedTemp = new Chart(ctx1, \{\
          type: 'line',\
          data: \{\
            labels: ['Point 1', 'Point 2', 'Point 3', 'Point 4', 'Point 5', 'Point 6', 'Point 7', 'Point 8'],\
            datasets: [\{\
              label: 'Temperature (\'b0C)',\
              data: state.ftReactor.bedTemp,\
              backgroundColor: 'rgba(245, 158, 11, 0.1)',\
              borderColor: '#f59e0b',\
              borderWidth: 3,\
              fill: true,\
              tension: 0.4,\
              pointRadius: 6,\
              pointBackgroundColor: '#f59e0b',\
              pointBorderColor: '#fff',\
              pointBorderWidth: 2\
            \},\
            \{\
              label: 'Target Temp',\
              data: new Array(8).fill(220),\
              borderColor: 'rgba(6, 182, 212, 0.5)',\
              borderWidth: 2,\
              borderDash: [5, 5],\
              fill: false,\
              pointRadius: 0\
            \}]\
          \},\
          options: \{\
            responsive: true,\
            maintainAspectRatio: false,\
            plugins: \{\
              legend: \{ labels: \{ color: '#e6eef6' \} \}\
            \},\
            scales: \{\
              y: \{ \
                min: 215,\
                max: 230,\
                ticks: \{ color: '#9aa6b2' \},\
                grid: \{ color: 'rgba(255,255,255,0.05)' \}\
              \},\
              x: \{\
                ticks: \{ color: '#9aa6b2' \},\
                grid: \{ color: 'rgba(255,255,255,0.05)' \}\
              \}\
            \}\
          \}\
        \});\
      \}\
      \
      const ctx2 = document.getElementById('productDistChart');\
      if (ctx2) \{\
        if (charts.productDist) charts.productDist.destroy();\
        charts.productDist = new Chart(ctx2, \{\
          type: 'doughnut',\
          data: \{\
            labels: ['C1-C4 (Gas)', 'C5-C11 (Naphtha)', 'C12-C18 (Diesel/SAF)', 'C19+ (Wax)'],\
            datasets: [\{\
              data: [\
                state.ftReactor.productDistribution.c1c4,\
                state.ftReactor.productDistribution.c5c11,\
                state.ftReactor.productDistribution.c12c18,\
                state.ftReactor.productDistribution.c19plus\
              ],\
              backgroundColor: [\
                'rgba(239, 68, 68, 0.8)',\
                'rgba(245, 158, 11, 0.8)',\
                'rgba(16, 185, 129, 0.8)',\
                'rgba(139, 92, 246, 0.8)'\
              ],\
              borderWidth: 2,\
              borderColor: '#0f1724'\
            \}]\
          \},\
          options: \{\
            responsive: true,\
            maintainAspectRatio: false,\
            plugins: \{\
              legend: \{\
                position: 'right',\
                labels: \{ color: '#e6eef6', padding: 15 \}\
              \}\
            \}\
          \}\
        \});\
      \}\
      \
      const ctx3 = document.getElementById('poisoningChart');\
      if (ctx3) \{\
        if (charts.poisoning) charts.poisoning.destroy();\
        charts.poisoning = new Chart(ctx3, \{\
          type: 'bar',\
          data: \{\
            labels: ['Sulfur', 'Nitrogen', 'Chlorine'],\
            datasets: [\{\
              label: 'Current Level (ppm)',\
              data: [\
                state.catalyst.poisoning.sulfur,\
                state.catalyst.poisoning.nitrogen,\
                state.catalyst.poisoning.chlorine\
              ],\
              backgroundColor: 'rgba(239, 68, 68, 0.6)',\
              borderColor: '#ef4444',\
              borderWidth: 2\
            \},\
            \{\
              label: 'Safe Limit (ppm)',\
              data: [0.5, 0.3, 0.2],\
              backgroundColor: 'rgba(16, 185, 129, 0.6)',\
              borderColor: '#10b981',\
              borderWidth: 2\
            \}]\
          \},\
          options: \{\
            responsive: true,\
            maintainAspectRatio: false,\
            plugins: \{\
              legend: \{ labels: \{ color: '#e6eef6' \} \}\
            \},\
            scales: \{\
              y: \{ \
                beginAtZero: true,\
                max: 0.6,\
                ticks: \{ color: '#9aa6b2' \},\
                grid: \{ color: 'rgba(255,255,255,0.05)' \}\
              \},\
              x: \{\
                ticks: \{ color: '#9aa6b2' \},\
                grid: \{ color: 'rgba(255,255,255,0.05)' \}\
              \}\
            \}\
          \}\
        \});\
      \}\
    \}, 10);\
  \}\
\
  function renderPumpsView(root) \{\
    let pumpsHtml = Object.entries(state.pumps).map(([name, pump]) => \{\
      return `<tr>\
        <td style="font-weight: 600;">$\{name\}</td>\
        <td><span class="status-pill" style="background: $\{getStatusColor(pump.status)\}22; color: $\{getStatusColor(pump.status)\}">$\{pump.status\}</span></td>\
        <td>$\{pump.speed\}%</td>\
        <td>$\{pump.power.toFixed(1)\} kW</td>\
        <td>$\{pump.efficiency.toFixed(1)\}%</td>\
        <td>$\{(pump.runtime / 60).toFixed(1)\} hrs</td>\
        <td><button onclick="togglePump('$\{name\}')">$\{pump.status === 'running' ? 'Stop' : 'Start'\}</button></td>\
      </tr>`;\
    \}).join('');\
    \
    root.innerHTML = \
    `<button class="back-btn" onclick="switchView('main')">\uc0\u8592  Back to Dashboard</button>\
    <div class="card">\
      <div class="title">\uc0\u9881 \u65039  Pump Operations Center</div>\
      <div class="subtitle">Real-time pump monitoring and control</div>\
      <table>\
        <thead>\
          <tr>\
            <th>Pump</th>\
            <th>Status</th>\
            <th>Speed</th>\
            <th>Power</th>\
            <th>Efficiency</th>\
            <th>Runtime</th>\
            <th>Control</th>\
          </tr>\
        </thead>\
        <tbody>$\{pumpsHtml\}</tbody>\
      </table>\
    </div>\
    <div class="grid-2">\
      <div class="card">\
        <div class="title">Pump Speed Distribution</div>\
        <div class="chart-container">\
          <canvas id="pumpSpeedChart"></canvas>\
        </div>\
      </div>\
      <div class="card">\
        <div class="title">Power Consumption</div>\
        <div class="chart-container">\
          <canvas id="powerChart"></canvas>\
        </div>\
      </div>\
    </div>\
    <div class="card">\
      <div class="title">Pump Efficiency Analysis</div>\
      <div class="chart-container">\
        <canvas id="efficiencyChart"></canvas>\
      </div>\
    </div>`;\
    \
    setTimeout(() => \{\
      const ctx1 = document.getElementById('pumpSpeedChart');\
      if (ctx1) \{\
        if (charts.pumpSpeed) charts.pumpSpeed.destroy();\
        charts.pumpSpeed = new Chart(ctx1, \{\
          type: 'radar',\
          data: \{\
            labels: Object.keys(state.pumps),\
            datasets: [\{\
              label: 'Speed (%)',\
              data: Object.values(state.pumps).map(p => p.speed),\
              backgroundColor: 'rgba(6, 182, 212, 0.2)',\
              borderColor: '#06b6d4',\
              borderWidth: 2,\
              pointBackgroundColor: '#06b6d4',\
              pointBorderColor: '#fff',\
              pointHoverBackgroundColor: '#fff',\
              pointHoverBorderColor: '#06b6d4'\
            \}]\
          \},\
          options: \{\
            responsive: true,\
            maintainAspectRatio: false,\
            plugins: \{\
              legend: \{ labels: \{ color: '#e6eef6' \} \}\
            \},\
            scales: \{\
              r: \{\
                beginAtZero: true,\
                max: 100,\
                ticks: \{ color: '#9aa6b2', backdropColor: 'transparent' \},\
                grid: \{ color: 'rgba(255,255,255,0.1)' \},\
                pointLabels: \{ color: '#9aa6b2' \}\
              \}\
            \}\
          \}\
        \});\
      \}\
      \
      const ctx2 = document.getElementById('powerChart');\
      if (ctx2) \{\
        if (charts.power) charts.power.destroy();\
        charts.power = new Chart(ctx2, \{\
          type: 'bar',\
          data: \{\
            labels: Object.keys(state.pumps),\
            datasets: [\{\
              label: 'Power (kW)',\
              data: Object.values(state.pumps).map(p => p.power),\
              backgroundColor: Object.values(state.pumps).map(p => \
                p.status === 'running' ? 'rgba(16, 185, 129, 0.6)' : \
                p.status === 'standby' ? 'rgba(245, 158, 11, 0.6)' : \
                'rgba(239, 68, 68, 0.6)'\
              ),\
              borderWidth: 0\
            \}]\
          \},\
          options: \{\
            responsive: true,\
            maintainAspectRatio: false,\
            plugins: \{\
              legend: \{ labels: \{ color: '#e6eef6' \} \}\
            \},\
            scales: \{\
              y: \{ \
                beginAtZero: true,\
                ticks: \{ color: '#9aa6b2' \},\
                grid: \{ color: 'rgba(255,255,255,0.05)' \}\
              \},\
              x: \{\
                ticks: \{ color: '#9aa6b2' \},\
                grid: \{ color: 'rgba(255,255,255,0.05)' \}\
              \}\
            \}\
          \}\
        \});\
      \}\
      \
      const ctx3 = document.getElementById('efficiencyChart');\
      if (ctx3) \{\
        if (charts.efficiency) charts.efficiency.destroy();\
        charts.efficiency = new Chart(ctx3, \{\
          type: 'line',\
          data: \{\
            labels: Object.keys(state.pumps),\
            datasets: [\{\
              label: 'Efficiency (%)',\
              data: Object.values(state.pumps).map(p => p.efficiency),\
              backgroundColor: 'rgba(16, 185, 129, 0.1)',\
              borderColor: '#10b981',\
              borderWidth: 3,\
              fill: true,\
              tension: 0.4,\
              pointRadius: 5,\
              pointBackgroundColor: '#10b981',\
              pointBorderColor: '#fff',\
              pointBorderWidth: 2\
            \}]\
          \},\
          options: \{\
            responsive: true,\
            maintainAspectRatio: false,\
            plugins: \{\
              legend: \{ labels: \{ color: '#e6eef6' \} \}\
            \},\
            scales: \{\
              y: \{ \
                beginAtZero: true,\
                max: 100,\
                ticks: \{ color: '#9aa6b2' \},\
                grid: \{ color: 'rgba(255,255,255,0.05)' \}\
              \},\
              x: \{\
                ticks: \{ color: '#9aa6b2' \},\
                grid: \{ color: 'rgba(255,255,255,0.05)' \}\
              \}\
            \}\
          \}\
        \});\
      \}\
    \}, 10);\
  \}\
\
  function switchView(view) \{\
    state.activeView = view;\
    render(document.getElementById('app'));\
  \}\
\
  function togglePause() \{\
    state.isPaused = !state.isPaused;\
    render(document.getElementById('app'));\
  \}\
\
  function refreshData() \{\
    for (const stage in state.processStages) \{\
      if (state.processStages.hasOwnProperty(stage)) \{\
        const current = state.processStages[stage].efficiency;\
        state.processStages[stage].efficiency = Math.min(Math.max(current + (Math.random() - 0.5) * 2, 80), 100);\
        \
        const currentYield = state.processStages[stage].yield;\
        state.processStages[stage].yield = Math.min(Math.max(currentYield + (Math.random() - 0.5) * 2, 80), 100);\
      \}\
    \}\
    \
    for (const tank in state.tanks) \{\
      if (state.tanks.hasOwnProperty(tank)) \{\
        const change = (Math.random() - 0.5) * 5;\
        state.tanks[tank].level = Math.min(Math.max(state.tanks[tank].level + change, 0), 100);\
        \
        if (state.tanks[tank].level > 85) state.tanks[tank].status = 'high';\
        else if (state.tanks[tank].level < 20) state.tanks[tank].status = 'low';\
        else state.tanks[tank].status = 'normal';\
        \
        state.tanks[tank].temp = 20 + Math.random() * 5;\
      \}\
    \}\
    \
    state.mlPredictions.efficiency = 88 + Math.random() * 8;\
    state.mlPredictions.qualityScore = 7.5 + Math.random() * 2;\
    state.mlPredictions.predictedYield = 80 + Math.random() * 10;\
    state.mlPredictions.co2Reduction = 40 + Math.random() * 10;\
    \
    const now = new Date();\
    state.trendData.labels.shift();\
    state.trendData.labels.push(now.toLocaleTimeString('en-US', \{hour: '2-digit', minute: '2-digit'\}));\
    state.trendData.efficiency.shift();\
    state.trendData.efficiency.push(state.mlPredictions.efficiency);\
    state.trendData.yield.shift();\
    state.trendData.yield.push(state.mlPredictions.predictedYield);\
    \
    state.dataPoints += Math.floor(Math.random() * 100);\
    state.lastUpdate = now;\
    \
    render(document.getElementById('app'));\
  \}\
\
  function toggleValve(valveName) \{\
    const valve = state.valves[valveName];\
    if (valve.status === 'open') \{\
      valve.status = 'closed';\
      valve.opening = 0;\
      valve.flow = 0;\
    \} else \{\
      valve.status = 'open';\
      valve.opening = 100;\
      valve.flow = 200 + Math.random() * 100;\
    \}\
    render(document.getElementById('app'));\
  \}\
\
  function togglePump(pumpName) \{\
    const pump = state.pumps[pumpName];\
    if (pump.status === 'running') \{\
      pump.status = 'stopped';\
      pump.speed = 0;\
      pump.power = 0;\
      pump.efficiency = 0;\
    \} else \{\
      pump.status = 'running';\
      pump.speed = 85 + Math.random() * 15;\
      pump.power = 12 + Math.random() * 5;\
      pump.efficiency = 90 + Math.random() * 5;\
    \}\
    render(document.getElementById('app'));\
  \}\
\
  function exportData() \{\
    const data = \{\
      timestamp: new Date().toISOString(),\
      connectionStatus: state.connectionStatus,\
      dataPoints: state.dataPoints,\
      tanks: state.tanks,\
      valves: state.valves,\
      pumps: state.pumps,\
      processStages: state.processStages,\
      mlPredictions: state.mlPredictions,\
      ftReactor: state.ftReactor,\
      catalyst: state.catalyst\
    \};\
    \
    const jsonStr = JSON.stringify(data, null, 2);\
    const blob = new Blob([jsonStr], \{ type: 'application/json' \});\
    const url = URL.createObjectURL(blob);\
    const a = document.createElement('a');\
    a.href = url;\
    a.download = `scada-report-$\{Date.now()\}.json`;\
    document.body.appendChild(a);\
    a.click();\
    document.body.removeChild(a);\
    URL.revokeObjectURL(url);\
    \
    alert('Data exported successfully!');\
  \}\
\
  function scheduleMaintenance() \{\
    alert('Maintenance scheduled for: ' + new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toLocaleDateString() + '\\n\\nNotification sent to maintenance team.');\
  \}\
\
  function downloadCatalystReport() \{\
    const report = `\
CATALYST PERFORMANCE REPORT\
Generated: $\{new Date().toISOString()\}\
\
=== CATALYST SPECIFICATIONS ===\
Type: $\{state.catalyst.type\}\
Loading: $\{state.catalyst.loading\}%\
Age: $\{(state.catalyst.age / 24).toFixed(0)\} days ($\{((state.catalyst.age / state.catalyst.expectedLife) * 100).toFixed(1)\}% of lifecycle)\
\
=== PERFORMANCE METRICS ===\
Activity: $\{state.catalyst.activity.toFixed(1)\}%\
Selectivity: $\{state.catalyst.selectivity.toFixed(1)\}%\
C5+ Selectivity: $\{state.catalyst.c5plusSelectivity.toFixed(1)\}%\
CO Conversion: $\{state.catalyst.coConversion.toFixed(1)\}%\
Deactivation Rate: $\{state.catalyst.deactivationRate.toFixed(3)\}% /hour\
\
=== OPERATING CONDITIONS ===\
Temperature: $\{state.catalyst.temperature.toFixed(1)\}\'b0C\
Pressure: $\{state.catalyst.pressure.toFixed(1)\} bar\
\
=== POISONING ANALYSIS ===\
Sulfur: $\{state.catalyst.poisoning.sulfur\} ppm (Limit: 0.5 ppm)\
Nitrogen: $\{state.catalyst.poisoning.nitrogen\} ppm (Limit: 0.3 ppm)\
Chlorine: $\{state.catalyst.poisoning.chlorine\} ppm (Limit: 0.2 ppm)\
\
=== REGENERATION HISTORY ===\
$\{state.catalyst.regenerationHistory.map(r => `$\{r.date\}: $\{r.method\} - Activity: $\{r.activity\}%`).join('\\n')\}\
\
=== RECOMMENDATIONS ===\
$\{state.catalyst.activity < 85 ? '\uc0\u9888 \u65039  CRITICAL: Schedule regeneration immediately' : state.catalyst.activity < 92 ? '\u9889  WARNING: Plan regeneration within 2 weeks' : '\u10003  OPTIMAL: Catalyst performing normally'\}\
Next Maintenance: $\{Math.floor((state.catalyst.expectedLife - state.catalyst.age) / 24)\} days\
    `;\
    \
    const blob = new Blob([report], \{ type: 'text/plain' \});\
    const url = URL.createObjectURL(blob);\
    const a = document.createElement('a');\
    a.href = url;\
    a.download = `catalyst-report-$\{Date.now()\}.txt`;\
    document.body.appendChild(a);\
    a.click();\
    document.body.removeChild(a);\
    URL.revokeObjectURL(url);\
  \}\
\
  function render(root) \{\
    if (!root) return;\
    switch(state.activeView) \{\
      case 'tanks':\
        renderTanksView(root);\
        break;\
      case 'valves':\
        renderValvesView(root);\
        break;\
      case 'pumps':\
        renderPumpsView(root);\
        break;\
      case 'ftreactor':\
        renderFTReactorView(root);\
        break;\
      default:\
        renderMainView(root);\
    \}\
  \}\
\
  initializeTrendData();\
\
  document.addEventListener('DOMContentLoaded', () => \{\
    render(document.getElementById('app'));\
  \});\
\
  window.switchView = switchView;\
  window.togglePause = togglePause;\
  window.refreshData = refreshData;\
  window.toggleValve = toggleValve;\
  window.togglePump = togglePump;\
  window.exportData = exportData;\
\
  if (!state.isPaused) \{\
    setInterval(() => \{\
      if (!state.isPaused) \{\
        refreshData();\
      \}\
    \}, 30000);\
  \}\
</script>\
</body>\
</html>}